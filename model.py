from mongoengine import Document, DynamicDocument, StringField, ListField, DateTimeField, DictField, BooleanField, ObjectIdField, Q
from typing import Dict, List, Any

import datetime

class BaseDocumentModel(Document):
    meta = {
        'abstract': True,
        'strict': False
    }

    def to_dict(self):
        data = self.to_mongo().to_dict()
        return data
    
    @classmethod
    def load_motor(cls, document: dict):
        return cls(**document)

class Vulnerability(DynamicDocument, BaseDocumentModel):
    '''
        Exploit Model
        take responsibility for exploits collection, which is used to store exploits and vulnerabilities
    '''
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    _id = ObjectIdField()
    '''inner id, which is used to identify exploit in database, whatever, it's not important'''

    codes = ListField(StringField(), required=False, default=[], index=True)
    '''codes is the public identifier of exploit, such as CVE-2019-0708, MS-17010, S2-013, etc. one exploit may have multiple codes'''

    names = ListField(StringField(), required=False, default=[], index=True)
    '''name is the name of exploit, such as BlueKeep, EternalBlue, DirtyCOW, etc.'''

    description = StringField(required=True, default='')
    '''
        description is the description of exploit, which is used to describe the exploit
        but the most important thing is that description will contains all the information of exploit
        including codes, name, exp, poc etc.
        which allows user to search in vector space or keyword space
    '''

    platforms = ListField(
        DictField(), 
        default=[
            {
                'platform': 'unknown',
                'version': []
            }
        ],
        index=True
    )
    '''
        platforms is the platform that exploit can be used, such as windows, linux, php, laravel, apache, etc.
        what's more, platforms also contains the version of platform, such as windows 7, windows 10, etc.
    '''

    authors = ListField(StringField(), required=False, default=[])
    '''authors is the author of exploit, such as metasploit, etc.'''

    references = ListField((), required=False, default=[])
    '''references is all the possible references to final source, such as https://www.exploit-db.com/exploits/12345'''

    date = DateTimeField(required=True, default=datetime.datetime.now())
    '''date is the date of exploit, which is used to identify the time of exploit'''

    source = StringField(required=True, default='exploitdb')
    '''source is the source of exploit, such as exploitdb, metasploit, aliyun etc.'''

    exp = StringField(required=False, default='')
    '''exploit'''

    poc = StringField(required=False, default='')
    '''proof of concept'''

    fix = StringField(required=False, default='')
    '''fix'''

    attachments = ListField(StringField(), required=False, default=[])
    '''attachments is the attachments of exploit, such as video, pdf, etc.'''

    original = DictField(required=True, default={})
    '''original is the original data of exploit, which is used to store the original data of exploit'''

    embeded = BooleanField(required=False, default=False)

    meta = {
        'collection': 'exploits',
        'indexes': [
            'name', 'codes', 'platforms'
        ]
    }

    def to_dict(self):
        return {
            'id': self._id,
            'codes': self.codes,
            'names': self.names,
            'description': self.description,
            'platforms': self.platforms,
            'authors': self.authors,
            'references': self.references,
            'date': self.date,
            'source': self.source,
            'exp': self.exp,
            'poc': self.poc,
            'fix': self.fix,
            'attachments': self.attachments,
            'embeded': self.embeded,
        }
    
    def set_codes(self, codes: List[str]) -> None:
        self.codes = codes

    def clear_codes(self) -> None:
        self.codes = []

    def add_code(self, code: str) -> None:
        self.codes.append(code)

    def set_names(self, names: List[str]) -> None:
        self.names = names

    def clear_names(self) -> None:
        self.names = []

    def add_name(self, name: str) -> None:
        self.names.append(name)

    def set_description(self, description: str) -> None:
        self.description = description

    def set_platforms(self, platforms: List[Dict[str, Any]]) -> None:
        self.platforms = platforms

    def clear_platforms(self) -> None:
        self.platforms = []

    def add_platform(self, platform: str, version: List[str]) -> None:
        self.platforms.append({
            'platform': platform,
            'version': version
        })

    def set_authors(self, authors: List[str]) -> None:
        self.authors = authors

    def clear_authors(self) -> None:
        self.authors = []

    def add_author(self, author: str) -> None:
        self.authors.append(author)

    def set_references(self, references: List[str]) -> None:
        self.references = references

    def clear_references(self) -> None:
        self.references = []

    def add_reference(self, reference: str) -> None:
        self.references.append(reference)

    def set_date(self, date: datetime.datetime) -> None:
        self.date = date

    def set_source(self, source: str) -> None:
        self.source = source

    def set_exp(self, exp: str) -> None:
        self.exp = exp

    def set_poc(self, poc: str) -> None:
        self.poc = poc

    def set_fix(self, fix: str) -> None:
        self.fix = fix

    def set_attachments(self, attachments: List[str]) -> None:
        self.attachments = attachments

    def clear_attachments(self) -> None:
        self.attachments = []

    def add_attachment(self, attachment: str) -> None:
        self.attachments.append(attachment)

    def set_original(self, original: Dict[str, Any]) -> None:
        self.original = original

    @staticmethod
    def find_by_id(id: str) -> 'Vulnerability':
        return Vulnerability.objects(_id=id).first()
    
    @staticmethod
    def find_by_name(name: str) -> List['Vulnerability']:
        # find name
        query = Q(names__icontains=name)
        return Vulnerability.objects(query).limit(5)
    
    @staticmethod
    def find_by_code(code: str) -> List['Vulnerability']:
        # find code
        query = Q(codes__icontains=code)
        return Vulnerability.objects(query).limit(5)
    
    @staticmethod
    def find_by_platform(platform: str) -> List['Vulnerability']:
        # find platform
        query = Q(platforms__platform__icontains=platform)
        return Vulnerability.objects(query).limit(5)
    
    @staticmethod
    def find_by_author(author: str) -> List['Vulnerability']:
        # find author
        query = Q(authors__icontains=author)
        return Vulnerability.objects(query).limit(5)
    
    @staticmethod
    def find_by_description(description: str) -> List['Vulnerability']:
        # find description
        query = Q(description__icontains=description)
        return Vulnerability.objects(query).limit(5)
    
    @staticmethod
    def get_all() -> List['Vulnerability']:
        return Vulnerability.objects()