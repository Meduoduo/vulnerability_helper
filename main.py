from typing import Dict, List
from db import mongo_connect
from model import Vulnerability
from config import SEARCH_KEY
from kasumi import *

class VulnerabilityHelperSpider(AbstractKasumiSpider):
    @property
    def name(self) -> str:
        return 'vulnerability_helper'
    
    @property
    def priority(self) -> int:
        return 10
    
    def search(self, search_param: Dict) -> List[KasumiSearchResult]:
        if 'code' in search_param:
            vulns = Vulnerability.find_by_code(search_param['code'])
            return [KasumiSearchResult.load_from_dict({
                'description': vuln.description,
                'codes': vuln.codes,
                'exp': vuln.exp,
                'poc': vuln.poc,
                'result': 'result has been set'
            }, disabled_llm_columns=['exp', 'poc'], disabled_show_columns=['description', 'codes', 'result']) for vuln in vulns]
        elif 'name' in search_param:
            vulns = Vulnerability.find_by_name(search_param['name'])
            return [KasumiSearchResult.load_from_dict({
                'description': vuln.description,
                'codes': vuln.codes,
                'exp': vuln.exp,
                'poc': vuln.poc,
                'result': 'result has been set'
            }, disabled_llm_columns=['exp', 'poc'], disabled_show_columns=['description', 'codes', 'result']) for vuln in vulns]
        elif 'platform' in search_param:
            vulns = Vulnerability.find_by_platform(search_param['platform'])
            return [KasumiSearchResult.load_from_dict({
                'description': vuln.description,
                'codes': vuln.codes,
                'exp': vuln.exp,
                'poc': vuln.poc,
                'result': 'result has been set'
            }, disabled_llm_columns=['exp', 'poc'], disabled_show_columns=['description', 'codes', 'result']) for vuln in vulns]
        elif 'description' in search_param:
            vulns = Vulnerability.find_by_description(search_param['description'])
            return [KasumiSearchResult.load_from_dict({
                'description': vuln.description,
                'codes': vuln.codes,
                'exp': vuln.exp,
                'poc': vuln.poc,
                'result': 'result has been set'
            }, disabled_llm_columns=['exp', 'poc'], disabled_show_columns=['description', 'codes', 'result']) for vuln in vulns]
        else:
            return [KasumiSearchResult.load_from_dict({
                'result': 'can not find any vulnerability'
            }, disabled_show_columns=['result'])]

search_desc = "search vulnerability by columns, accept one of [code,name,platform,description] as column name. you had better use english instead of others"\
                     "example:{'code':'CVE-2016-10033'} or {'name':'EternalBlue'} or {'platform':'linux'} or {'description':'dirtypipe'}"

if __name__ == "__main__":
    mongo_connect()

    kasumi = Kasumi(
        KasumiConfigration(
            app_id=53,
            token='',
            search_key=SEARCH_KEY,
            search_desc=search_desc
        )
    )
    kasumi.add_spider(VulnerabilityHelperSpider(app=kasumi))
    kasumi.run_forever(3433)